---
export interface Props {
  title: string;
  id: string;
  canMinimize?: boolean;
  canMaximize?: boolean;
  canClose?: boolean;
}

const {
  title,
  id,
  canMinimize = true,
  canMaximize = true,
  canClose = true,
} = Astro.props;
---

<section
  id={id}
  class="flex flex-col justify-center items-center gap-3 text-center py-4 sm:py-8 w-full bg-gradient-to-b from-[#ece9d8] to-[#d4d0c8] border-2 border-[#0054e3] shadow-[4px_4px_0px_rgba(0,0,0,0.1)] transition-all duration-200"
>
  <!-- Window Title Bar -->
  <div
    class="w-full h-6 bg-gradient-to-r from-[#0054e3] to-[#3a7ee8] -mt-4 sm:-mt-8 -mx-4 sm:-mx-8 mb-4 flex items-center px-2 justify-between"
  >
    <span class="text-white text-sm ml-2 font-medium">{title}</span>

    <div class="flex gap-1 ml-auto">
      <!-- Minimize -->
      {
        canMinimize && (
          <button
            class="minimize-btn cursor-pointer w-4 h-4 flex items-center justify-center bg-gradient-to-b from-[#b5d3f3] to-[#b5d3f3] border border-[#3a6ea5] rounded-[2px] shadow-inner active:translate-y-px"
            onclick={`document.getElementById('${id}').classList.add('minimized')`}
          >
            <svg
              width="14"
              height="14"
              viewBox="0 0 14 14"
              class="block"
              fill="none"
            >
              <rect x="3" y="10" width="8" height="2" rx="1" fill="#245edc" />
              <rect
                x="3"
                y="10"
                width="8"
                height="2"
                rx="1"
                stroke="#245edc"
                stroke-width="0.5"
              />
            </svg>
          </button>
        )
      }
      <!-- Maximize -->
      {
        canMaximize && (
          <button
            class="maximize-btn cursor-pointer w-4 h-4 flex items-center justify-center bg-gradient-to-b from-[#b5d3f3] to-[#b5d3f3] border border-[#3a6ea5] rounded-[2px] shadow-inner active:translate-y-px"
            onclick={`document.getElementById('${id}').classList.toggle('maximized')`}
          >
            <svg
              width="14"
              height="14"
              viewBox="0 0 14 14"
              class="block"
              fill="none"
            >
              <rect
                x="3"
                y="3"
                width="8"
                height="8"
                rx="1"
                fill="none"
                stroke="#245edc"
                stroke-width="1"
              />
            </svg>
          </button>
        )
      }
      <!-- Close -->
      {
        canClose && (
          <button
            class="close-btn cursor-pointer w-4 h-4 flex items-center justify-center bg-gradient-to-b from-[#ffa1a1] to-[#e35d5b] border border-[#a80000] rounded-[2px] shadow-inner active:translate-y-px"
            onclick={`document.getElementById('${id}').classList.add('hidden')`}
          >
            <svg
              width="14"
              height="14"
              viewBox="0 0 14 14"
              class="block"
              fill="none"
            >
              <line
                x1="4"
                y1="4"
                x2="10"
                y2="10"
                stroke="#fff"
                stroke-width="2"
                stroke-linecap="round"
              />
              <line
                x1="10"
                y1="4"
                x2="4"
                y2="10"
                stroke="#fff"
                stroke-width="2"
                stroke-linecap="round"
              />
            </svg>
          </button>
        )
      }
    </div>
  </div>
  <slot />
</section>

<style>
  /* Minimize animation */
  .minimized {
    transform: translateY(calc(100vh - 2rem));
    opacity: 0.5;
  }

  /* Maximize animation */
  .maximized {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    width: 100vw !important;
    height: 100vh !important;
    margin: 0 !important;
    z-index: 100 !important;
    transform: none !important;
  }

  /* Restore button when maximized */
  .maximized .maximize-btn svg {
    transform: rotate(180deg);
  }

  /* Transition for all window states */
  section {
    transition: all 0.3s ease-in-out;
  }
</style>

<script>
  // Make window draggable
  function makeDraggable(windowId: string) {
    const window = document.getElementById(windowId);
    const titleBar = window?.querySelector(".bg-gradient-to-r");
    if (!window || !titleBar) return;

    let isDragging = false;
    let currentX: number = 0;
    let currentY: number = 0;
    let initialX: number = 0;
    let initialY: number = 0;
    let xOffset = 0;
    let yOffset = 0;

    titleBar.addEventListener("mousedown", (e: MouseEvent) => {
      if (window.classList.contains("maximized")) return;
      initialX = e.clientX - xOffset;
      initialY = e.clientY - yOffset;
      isDragging = true;
    });

    document.addEventListener("mousemove", (e: MouseEvent) => {
      if (isDragging && !window.classList.contains("maximized")) {
        e.preventDefault();
        currentX = e.clientX - initialX;
        currentY = e.clientY - initialY;
        xOffset = currentX;
        yOffset = currentY;
        window.style.transform = `translate(${currentX}px, ${currentY}px)`;
      }
    });

    document.addEventListener("mouseup", () => {
      isDragging = false;
    });

    // Double click title bar to maximize/restore
    titleBar.addEventListener("dblclick", () => {
      if (window.querySelector(".maximize-btn")) {
        window.classList.toggle("maximized");
      }
    });
  }

  // Initialize draggable for all windows
  document.addEventListener("DOMContentLoaded", () => {
    const windows = document.querySelectorAll('[id$="-window"]');
    windows.forEach((window) => {
      makeDraggable(window.id);
    });
  });
</script>
